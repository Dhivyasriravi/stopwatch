import { useEffect, useReducer, useRef } from "react";

const initialState = {
    isRunning: false,
    time: 0,
};

const reducer = (state, action) => {
    switch (action.type) {
        case "start":
            return { ...state, isRunning: true };
        case "stop":
            return { ...state, isRunning: false };
        case "reset":
            return { ...state, isRunning: false, time: 0 };
        case "tick":
            return { ...state, time: state.time + 1 };
        default:
            return state;
    }
};

const Stopwatch = () => {
    const [state, dispatch] = useReducer(reducer, initialState);
    const intervalId = useRef(null);

    useEffect(() => {
        if (!state.isRunning) return;

        intervalId.current = setInterval(() => {
            dispatch({ type: "tick" });
        }, 1000);

        return () => clearInterval(intervalId.current);
    }, [state.isRunning]);

    const containerStyle = {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        height: "100vh",
        background:
            "linear-gradient(135deg, #f6d365 0%, #fda085 100%)",
        fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
        color: "#333",
        borderRadius: "12px",
        padding: "2rem",
        boxShadow: "0 4px 15px rgba(0,0,0,0.2)",
        width: "250px",
        margin: "auto",
    };

    const timeStyle = {
        fontSize: "4rem",
        fontWeight: "bold",
        marginBottom: "1rem",
        color: "#2c3e50",
        textShadow: "1px 1px 4px #ecf0f1",
    };

    const buttonContainer = {
        display: "flex",
        justifyContent: "space-between",
        width: "100%",
    };

    const buttonStyle = {
        flex: 1,
        margin: "0 5px",
        padding: "10px 0",
        fontWeight: "bold",
        fontSize: "1rem",
        borderRadius: "8px",
        border: "none",
        cursor: "pointer",
        color: "white",
        transition: "background-color 0.3s ease",
    };

    const startStyle = {
        ...buttonStyle,
        backgroundColor: "#27ae60",
    };

    const stopStyle = {
        ...buttonStyle,
        backgroundColor: "#c0392b",
    };

    const resetStyle = {
        ...buttonStyle,
        backgroundColor: "#2980b9",
    };

    return (
        <div style={containerStyle}>
            <div style={timeStyle}>{state.time}s</div>
            <div style={buttonContainer}>
                <button
                    style={startStyle}
                    onClick={() => dispatch({ type: "start" })}
                    disabled={state.isRunning}
                >
                    START
                </button>
                <button
                    style={stopStyle}
                    onClick={() => dispatch({ type: "stop" })}
                    disabled={!state.isRunning}
                >
                    STOP
                </button>
                <button
                    style={resetStyle}
                    onClick={() => dispatch({ type: "reset" })}
                >
                    RESET
                </button>
            </div>
        </div>
    );
};

export default Stopwatch;
